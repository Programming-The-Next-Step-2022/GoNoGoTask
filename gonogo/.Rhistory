training = TRUE,
lastPress = Sys.time(),
trial = 0,
rt = 0,
stimulus = NULL,
response = NULL)
# GameData stores vectors of histories
GameData <- reactiveValues(trial = c(),
rt = c(),
stimulus = c(),
lastPress = c(),
response = c())
# Page Layout
PageLayouts <- reactive({
# Welcome page
if (CurrentValues$page == "welcome") {
inputLabel <- p("Please enter your name or a unique ID")
}
return(
list(
h1("Go No-Go Task"),
p("This is a version of the Go-No Go Task implemented in Shiny. The task measures inhibitory control, a cognitive process that enables humans to cancel motor activity after its initiation."),
p("If you wish to continue, please enter your name or a unique ID number"),
textInput(inputId = "workerid",
label = inputLabel,
placeholder = "e.g., participant 1"),
actionButton(inputId = "gt_inst1",
label = "Start!")
)
)
# Instructions
if (CurrentValues$page == "inst1") {
return(
list(
h1("The Go-No Go Task"),
p("Some instructions go here"),
actionButton(inputId = "gt_training",
label = "Start the task")
)
)}
}
# Game
# if (currentValues$page == "game") {
#
# }
)
}
# server <- function(input, output, session) {
#
#   click_timestamps <- reactiveVal(NULL)
#   recorded_rts <- reactiveVal(NULL)
#
#   observeEvent(input$button, {
#     new_val <- append(click_timestamps(), Sys.time())
#
#     # set click timestamp
#     click_timestamps(new_val)
#
#     if(length(new_val) == 2) {
#
#       duration <- as.numeric(difftime(new_val[2], new_val[1], units = "secs"))
#       recorded_rts(c(recorded_rts(), duration))
#
#       print(recorded_rts)
#       print(click_timestamps)
#
#       # reset click timestamp
#       click_timestamps(NULL)
#     }
#   })
#
#   output$table <- renderTable(
#     if (length(recorded_rts()) > 0) {
#       return(data.frame(n = seq_along(recorded_rts()), rt = recorded_rts()))
#     } else {
#       return(data.frame(n = "-", rt = "-"))
#     }
#
#   )
#   output$plot <- renderPlot(
#     if (length(recorded_rts()) > 0)
#       hist(recorded_rts())
#     else
#       plot(1, type="n", xlab="", ylab="", xlim=c(0, 10), ylim=c(0, 10))
#   )
#
# }
#
shinyApp(ui, server)
devtools::load_
devtools::load_all()
devtools::build()
>>>>>>> Stashed changes
inter <- c()
time <- c()
start <- c()
finish <- c()
for (i in 1:10) {
inter[i] <- sample(seq(from = 0.01, to = 2.0, by = 0.01), size = 1)
start[i] <- Sys.time()
rrt(interval = inter[i])
finish[i] <- Sys.time()
time[i] <- (finish[i] - start[i])[[1]]
}
expect_true(all(time >= inter))
devtools::build()
library(usethis)
library(devtools)
for (i in 1:10) {
inter[i] <- sample(seq(from = 0.01, to = 2.0, by = 0.01), size = 1)
start[i] <- Sys.time()
rrt(interval = inter[i])
finish[i] <- Sys.time()
time[i] <- (finish[i] - start[i])[[1]]
}
devtools::load_all()
for (i in 1:10) {
inter[i] <- sample(seq(from = 0.01, to = 2.0, by = 0.01), size = 1)
start[i] <- Sys.time()
rrt(interval = inter[i])
finish[i] <- Sys.time()
time[i] <- (finish[i] - start[i])[[1]]
}
expect_true(all(time >= inter))
all(time >= inter)
devtools::test()
install("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
library(cli)
devtools::build()
devtools::load_all()
install.packages("testthat")
install.packages("testthat")
install.packages("testthat")
library(testthat)
devtools::load_all()
devtools::test()
remove.packages("cli", lib="~/R/win-library/4.1")
remove.packages("testthat", lib="~/R/win-library/4.1")
install.packages("testthat")
install.packages("testthat")
devtools::test()
devtools::build()
devtools::test()
devtools::build()
devtools::test()
class(c("a", "b"))
class(c("a", "b", "F"))
class(0.6)
class(7)
letters
numbers
devtools::build()
devtools::load_all()
devtools::test()
rrt(choice_keys = "f", interval = "a")
rrt(choice_keys = "f", interval = "a")
rrt()
devtools::build()
devtools::load_all()
devtools::test()
df <- data.frame(x=1:10, y=10:19)
df
class(df)
names(data)
names(df)
"x" %in% names(df)
c("x", "y") %in% names(df)
c("y", x") %in% names(df)
data<-df
for (i in 1:nrow(data)) {
if (data$response[i] == " ") {
data$response[i] <- "space"
}
}
"x" %in% names(df)
as.numeric("a")
data.frame(x=NULL, y=NULL)
data1 <- c(1:10)
update_data(data = data1, stimuli = c("A", "X"))
data1 <- data.frame(response = rep(" ", 5), rt = rep(0.1, 5),
stimulus = rep("A", 5))
update_data(data = data1, stimuli = c("A", "X"))
devtools::build()
devtools::load_all()
data1 <- data.frame(response = rep(" ", 5), rt = rep(0.1, 5),
stimulus = rep("A", 5))
update_data(data = data1, stimuli = c("A", "X"))
data2 <- data.frame(response = rep(" ", 5), rt = rep(0.1, 5),
stimulus = rep("A", 5), correct = rep(1, 5))
update(data = as.matrix(data2), stimuli = c("A", "X"))
update_data(data = as.matrix(data2), stimuli = c("A", "X"))
update_data(data = data2, stimuli = 1:2)
update_data(data = data2, stimuli = "A")
update_data(data = data2, stimuli = c("A", "X"),
mean_error = 1:2)
update_data(data = data2, stimuli = c("A", "X"),
mean_error = "1")
devtools::test()
play_gonogo(id = "M", n_trial = 0, n_block = 2)
1/6
1.5%/%1
1.5%%1
3%%1
n_trial<-5
n_trial %% 1 != 0
5 %% 1
devtools::build()
play_gonogo(id = "participant", n_block = "a")
play_gonogo(id = "participant", n_block = -1)
devtools::build()
play_gonogo(id = "participant", n_trial = -1)
n_trial <- -1
if (class(n_trial) != "numeric" || length(n_trial) > 0 ||
n_trial %% 1 != 0 || n_trial < 0) {
stop("n_trial must be a numeric vector of length 1")
}
devtools::build()
devtools::load_all()
play_gonogo(id = "participant", n_block = "a")
play_gonogo(id = "participant", n_block = -1)
play_gonogo(id = "participant", n_block = 0.5)
play_gonogo(id = "participant", n_trial = "a")
play_gonogo(id = "participant", n_trial = -1)
play_gonogo(id = "participant", n_trial = 0.5)
play_gonogo(id = "participant", stimuli = 1:2)
play_gonogo(id = "participant", stimuli = "A")
play_gonogo(id = "participant", inter = "A")
play_gonogo(id = "participant", inter = 1:5)
play_gonogo(id = "participant", prb = "A")
play_gonogo(id = "participant", prb = 1:5)
play_gonogo(id = "participant", prb = c(1, 0.1))
devtools::test()
range(c(1:10, NA))
range(c(1:10, NA), na.rm=T)
range(c(1:10, NA), na.rm=T)[2]-range(c(1:10, NA), na.rm=T)[1]
data<-data.frame(rt = c(1:10, 51:60, 91:100))
data
check_rt(data = data, ratio = 1/3)
devtools::build()
devtools::load_all()
check_rt(data = data, ratio = 1/3)
paste0("hi ", 3, " lol")
?expect_output
expect_message()
?expect_message
devtools::build()
devtools::document()
devtools::load_all()
devtools::test()
devtools::build()
devtools::document()
devtools::load_all()
p1_data <- play_gonogo(id = "p1", n_trial = 5, n_block = 3, stimuli = c("A", "X"), inter = 0.6, prb = c(0.8, 0.2))
devtools::test()
p1_data
p1_data <- play_gonogo(id = "p1", n_trial = 5, n_block = 3, stimuli = c("A", "X"), inter = 0.6, prb = c(0.8, 0.2))
p1_data
p1_data
getwd()
p1_data <- data.frame(id = rep("p1", 15),
response = c("none", "none", "space", "space", "none", "space", "none", "space", "space", "none", "none", "space", "none", "space", "none"),
correct = c(1,1,1,1,0,0,0,1,1,1,0,1,0,1,0),
SDT = c("correctrejection", "correctrejection", "hit", "hit", "miss", "falsealarm", "miss", "hit", "hit", "correctrejection", "miss", "hit", "miss", "hit", "miss"),
rt = c(NA, NA, 0.47666382, 0.55146193, NA, 0.56809711, NA, -0.01646210, 0.59251689, NA, NA, -0.01505090, NA, -0.02203418, NA),
stimulus = c("X", "X", "A", "A", "A", "X", "A", "A", "A", "X", "A", "A", "A", "A", "A"),
block = rep(c(1, 2, 3), each = 5))
p1_data
getwd()
id <- "p1"
draw_screen(paste0("Welcome to the Go-No Go Task ", id,
"!\nPress Enter to continue."), cex = 1.3)
n_block <- 3
n_trial <- 5
draw_screen(paste0("The task consists of ", n_block, " blocks, each consisting of ", n_trial, " trials.\nThere is is a break between each pair of blocks.\nBefore starting the task, there is one practice block of 10 trials.\n Press Enter to start the practice trials."),
cex = 0.75)
# Example of how the task looks like
draw_screen("A", 3)
hist(data$rt)
hist(p1_data$rt)
hist(p1_data$rt, breaks = 15, col = "lightblue", title = "Reaction times (in seconds)", xlab = NULL)
hist(p1_data$rt, breaks = 100, col = "lightblue", title = "Reaction times (in seconds)", xlab = NULL)
hist(p1_data$rt, breaks = 30, col = "lightblue", title = "Reaction times (in seconds)", xlab = NULL)
hist(p1_data$rt, breaks = 20, col = "lightblue", title = "Reaction times (in seconds)", xlab = NULL)
hist(p1_data$rt, breaks = 25, col = "lightblue", title = "Reaction times (in seconds)", xlab = NULL)
check_rt(p1_data)
check_rt(data = p1_data, ratio = 1/3, min = 0.2)
check_rt(p1_data)
min(data[, "rt"]) <= min
p1_data -> data
min(data[, "rt"]) <= min
data$rt
min(data[, "rt"], na.rm = TRUE) <= min
data$rt
type(data$rt)
class(data$rt)
data[,"rt"]
min(data[,"rt"])
min(data[,"rt"], na.rm = TRUE)
check_reporter(data)
check_rt(data)
check_rt <- function(data, ratio = 1/3, minimum = 0.2) {
# Create a threshold based on the ratio
threshold <- ratio * abs(range(data$rt, na.rm = TRUE)[1] -
range(data$rt, na.rm = TRUE)[2])
# Create a vector of the differences between (sorted) reaction times
dist <- c()
for (i in 1:(sum(!is.na(data$rt))-1)) {
dist[i] <- abs(sort(data$rt)[i+1] - sort(data$rt)[i])
}
# Notify of possible gaps and small min values in the data
if (sum(dist >= threshold) == 1) {
print(paste0("There are observations in your reaction times that are unusually far from each other: the ratio of the distance to the range is greater than ", round(ratio, 2),". This is problematic as it means that your data form two clusters, one of which likely consists of unrealistically small reaction times. These are typical in Go-No Go data as responses that are too slow tend to leak into the next trial and appear as extremely small reaction times on that trial. A potential threshold to consider for removing unusually short reaction times is ", round(threshold, 3), ". You can take a closer look at the distribution of the reaction times here:"))
hist(data$rt, breaks = 20, col = "lightblue",
main = "Reaction Times", xlab = NULL)
if (min(data[, "rt"], na.rm = TRUE) <= minimum) {
print(paste0("The minimum of your reaction time data is equal to or below ", min, ". Specifically, there are ", sum(data[, "rt"] <= min)," observations below that threshold. Consider omitting these observations from your data."))
}
} else if (sum(dist >= threshold) > 1) {
print(paste0("There are multiple gaps in your reaction time data, meaning that they form more than two clusters that are further than ", threshold, " from each other. Take a look at the distribution of your data below:"))
hist(data$rt, breaks = 20, col = "lightblue",
main = "Reaction Times", xlab = NULL)
if (min(data[, "rt"], na.rm = TRUE) <= minimum) {
print(paste0("The minimum of your reaction time data is equal to or below ", min, ". Specifically, there are ", sum(data[, "rt"] <= min)," observations below that threshold. Consider omitting these observations from your data."))
}
} else if (sum(dist >= threshold) == 0) {
print(paste0("There are no gaps in your reaction time data according to the ", ratio, " ratio."))
if (min(data[, "rt"], na.rm = TRUE) <= minimum) {
print(paste0("The minimum of your reaction time data is equal to or below ", min, ". Specifically, there are ", sum(data[, "rt"] <= min)," observations below that threshold. Consider omitting these observations from your data."))
}
}
}
check_rt(p1_data)
check_rt <- function(data, ratio = 1/3, minimum = 0.2) {
# Create a threshold based on the ratio
threshold <- ratio * abs(range(data$rt, na.rm = TRUE)[1] -
range(data$rt, na.rm = TRUE)[2])
# Create a vector of the differences between (sorted) reaction times
dist <- c()
for (i in 1:(sum(!is.na(data$rt))-1)) {
dist[i] <- abs(sort(data$rt)[i+1] - sort(data$rt)[i])
}
# Notify of possible gaps and small min values in the data
if (sum(dist >= threshold) == 1) {
print(paste0("There are observations in your reaction times that are unusually far from each other: the ratio of the distance to the range is greater than ", round(ratio, 2),". This is problematic as it means that your data form two clusters, one of which likely consists of unrealistically small reaction times. These are typical in Go-No Go data as responses that are too slow tend to leak into the next trial and appear as extremely small reaction times on that trial. A potential threshold to consider for removing unusually short reaction times is ", round(threshold, 3), ". You can take a closer look at the distribution of the reaction times here:"))
hist(data$rt, breaks = 20, col = "lightblue",
main = "Reaction Times", xlab = NULL)
if (min(data$rt, na.rm = TRUE) <= minimum) {
print(paste0("The minimum of your reaction time data is equal to or below ", min, ". Specifically, there are ", sum(data$rt <= min)," observations below that threshold. Consider omitting these observations from your data."))
}
} else if (sum(dist >= threshold) > 1) {
print(paste0("There are multiple gaps in your reaction time data, meaning that they form more than two clusters that are further than ", threshold, " from each other. Take a look at the distribution of your data below:"))
hist(data$rt, breaks = 20, col = "lightblue",
main = "Reaction Times", xlab = NULL)
if (min(data$rt, na.rm = TRUE) <= minimum) {
print(paste0("The minimum of your reaction time data is equal to or below ", min, ". Specifically, there are ", sum(data$rt <= min)," observations below that threshold. Consider omitting these observations from your data."))
}
} else if (sum(dist >= threshold) == 0) {
print(paste0("There are no gaps in your reaction time data according to the ", ratio, " ratio."))
if (min(data$rt, na.rm = TRUE) <= minimum) {
print(paste0("The minimum of your reaction time data is equal to or below ", min, ". Specifically, there are ", sum(data$rt <= min)," observations below that threshold. Consider omitting these observations from your data."))
}
}
}
check_rt(p1_data)
check_rt <- function(data, ratio = 1/3, minimum = 0.2) {
# Create dataframe
dat <- data
# Create a threshold based on the ratio
threshold <- ratio * abs(range(dat$rt, na.rm = TRUE)[1] -
range(dat$rt, na.rm = TRUE)[2])
# Create a vector of the differences between (sorted) reaction times
dist <- c()
for (i in 1:(sum(!is.na(dat$rt))-1)) {
dist[i] <- abs(sort(dat$rt)[i+1] - sort(dat$rt)[i])
}
# Notify of possible gaps and small min values in the dat
if (sum(dist >= threshold) == 1) {
print(paste0("There are observations in your reaction times that are unusually far from each other: the ratio of the distance to the range is greater than ", round(ratio, 2),". This is problematic as it means that your dat form two clusters, one of which likely consists of unrealistically small reaction times. These are typical in Go-No Go dat as responses that are too slow tend to leak into the next trial and appear as extremely small reaction times on that trial. A potential threshold to consider for removing unusually short reaction times is ", round(threshold, 3), ". You can take a closer look at the distribution of the reaction times here:"))
hist(dat$rt, breaks = 20, col = "lightblue",
main = "Reaction Times", xlab = NULL)
if (min(dat$rt, na.rm = TRUE) <= minimum) {
print(paste0("The minimum of your reaction time dat is equal to or below ", min, ". Specifically, there are ", sum(dat$rt <= min)," observations below that threshold. Consider omitting these observations from your dat."))
}
} else if (sum(dist >= threshold) > 1) {
print(paste0("There are multiple gaps in your reaction time dat, meaning that they form more than two clusters that are further than ", threshold, " from each other. Take a look at the distribution of your dat below:"))
hist(dat$rt, breaks = 20, col = "lightblue",
main = "Reaction Times", xlab = NULL)
if (min(dat$rt, na.rm = TRUE) <= minimum) {
print(paste0("The minimum of your reaction time dat is equal to or below ", min, ". Specifically, there are ", sum(dat$rt <= min)," observations below that threshold. Consider omitting these observations from your dat."))
}
} else if (sum(dist >= threshold) == 0) {
print(paste0("There are no gaps in your reaction time dat according to the ", ratio, " ratio."))
if (min(dat$rt, na.rm = TRUE) <= minimum) {
print(paste0("The minimum of your reaction time dat is equal to or below ", min, ". Specifically, there are ", sum(dat$rt <= min)," observations below that threshold. Consider omitting these observations from your dat."))
}
}
}
check_rt(p1_data)
check_rt <- function(data, ratio = 1/3, minimum = 0.2) {
# Create dataframe
dat <- as.data.frame(data)
# Create a threshold based on the ratio
threshold <- ratio * abs(range(dat$rt, na.rm = TRUE)[1] -
range(dat$rt, na.rm = TRUE)[2])
# Create a vector of the differences between (sorted) reaction times
dist <- c()
for (i in 1:(sum(!is.na(dat$rt))-1)) {
dist[i] <- abs(sort(dat$rt)[i+1] - sort(dat$rt)[i])
}
# Notify of possible gaps and small min values in the dat
if (sum(dist >= threshold) == 1) {
print(paste0("There are observations in your reaction times that are unusually far from each other: the ratio of the distance to the range is greater than ", round(ratio, 2),". This is problematic as it means that your dat form two clusters, one of which likely consists of unrealistically small reaction times. These are typical in Go-No Go dat as responses that are too slow tend to leak into the next trial and appear as extremely small reaction times on that trial. A potential threshold to consider for removing unusually short reaction times is ", round(threshold, 3), ". You can take a closer look at the distribution of the reaction times here:"))
hist(dat$rt, breaks = 20, col = "lightblue",
main = "Reaction Times", xlab = NULL)
if (min(dat$rt, na.rm = TRUE) <= minimum) {
print(paste0("The minimum of your reaction time dat is equal to or below ", min, ". Specifically, there are ", sum(dat$rt <= min)," observations below that threshold. Consider omitting these observations from your dat."))
}
} else if (sum(dist >= threshold) > 1) {
print(paste0("There are multiple gaps in your reaction time dat, meaning that they form more than two clusters that are further than ", threshold, " from each other. Take a look at the distribution of your dat below:"))
hist(dat$rt, breaks = 20, col = "lightblue",
main = "Reaction Times", xlab = NULL)
if (min(dat$rt, na.rm = TRUE) <= minimum) {
print(paste0("The minimum of your reaction time dat is equal to or below ", min, ". Specifically, there are ", sum(dat$rt <= min)," observations below that threshold. Consider omitting these observations from your dat."))
}
} else if (sum(dist >= threshold) == 0) {
print(paste0("There are no gaps in your reaction time dat according to the ", ratio, " ratio."))
if (min(dat$rt, na.rm = TRUE) <= minimum) {
print(paste0("The minimum of your reaction time dat is equal to or below ", min, ". Specifically, there are ", sum(dat$rt <= min)," observations below that threshold. Consider omitting these observations from your dat."))
}
}
}
check_rt(p1_data)
check_rt <- function(data, ratio = 1/3, minimum = 0.2) {
# Create a threshold based on the ratio
threshold <- ratio * abs(range(data$rt, na.rm = TRUE)[1] -
range(data$rt, na.rm = TRUE)[2])
# Create a vector of the differences between (sorted) reaction times
dist <- c()
for (i in 1:(sum(!is.na(data$rt))-1)) {
dist[i] <- abs(sort(data$rt)[i+1] - sort(data$rt)[i])
}
# Notify of possible gaps and small min values in the dat
if (sum(dist >= threshold) == 1) {
print(paste0("There are observations in your reaction times that are unusually far from each other: the ratio of the distance to the range is greater than ", round(ratio, 2),". This is problematic as it means that your dat form two clusters, one of which likely consists of unrealistically small reaction times. These are typical in Go-No Go dat as responses that are too slow tend to leak into the next trial and appear as extremely small reaction times on that trial. A potential threshold to consider for removing unusually short reaction times is ", round(threshold, 3), ". You can take a closer look at the distribution of the reaction times here:"))
hist(data$rt, breaks = 20, col = "lightblue",
main = "Reaction Times", xlab = NULL)
} else if (sum(dist >= threshold) > 1) {
print(paste0("There are multiple gaps in your reaction time dat, meaning that they form more than two clusters that are further than ", threshold, " from each other. Take a look at the distribution of your dat below:"))
hist(data$rt, breaks = 20, col = "lightblue",
main = "Reaction Times", xlab = NULL)
} else {
print(paste0("There are no gaps in your reaction time data according to the ", ratio, " you set."))
}
}
check_rt(p1_data)
devtools::document()
devtools::build()
devtools::test()
devtools::load_all()
devtools::test()
devtools::build()
devtools::document()
devtools::load_all()
devtools::test()
devtools::create()
getwd()
devtools::create("C:/Users/Omistaja/OneDrive/Tiedostot/GitHub/theprojectofmilla/gonogo")
devtools::install_github("Programming-The-Next-Step-2022/GoNoGoTask"")
devtools::install_github("Programming-The-Next-Step-2022/GoNoGoTask")
devtools::install_github("Programming-The-Next-Step-2022/GoNoGoTask/tree/main/gonogo")
install(gonogo)
devtools::build()
devtools::document()
devtools::test()
install.packages("gonogo")
install.packages("gonogo")
devtools::install()
devtools::build()
devtools::document
devtools::document()
devtools::test()
devtools::install_github("Programming-The-Next-Step-2022/GoNoGoTask")
devtools::install_github("Programming-The-Next-Step-2022/GoNoGoTask/tree/main/gonogo")
devtools::install_github("Programming-The-Next-Step-2022/GoNoGoTask/gonogo")
# Load package
devtools::install_github("Programming-The-Next-Step-2022/GoNoGoTask/gonogo")
library(gonogo)
?play_gonogo
?gonogo
?check_rt
play_gonogo(id = "Milla", n_trial = 10, n_block = 2)
play_gonogo(id = "Milla", n_trial = 10, n_block = 2)-> data
check_rt(data)
devtools::document()
devtools::build()
devtools::test()
devtools::install()
play_gonogo(id = "M", n_trial = 10, n_block = 2)
play_gonogo(id = "M", n_trial = 10, n_block = 2)->data
check_rt(data = data)
?gonogo
?play_gonogo
?check_rt
devtools::build()
devtools::document()
devtools::document()
devtools::build()
